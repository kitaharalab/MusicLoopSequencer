{"ast":null,"code":"import React__default, { useEffect } from 'react';\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nfunction useOnMount(callback) {\n  useEffect(callback, []);\n}\nfunction useSound(src, _ref) {\n  if (_ref === void 0) {\n    _ref = {};\n  }\n  var _ref2 = _ref,\n    _ref2$volume = _ref2.volume,\n    volume = _ref2$volume === void 0 ? 1 : _ref2$volume,\n    _ref2$playbackRate = _ref2.playbackRate,\n    playbackRate = _ref2$playbackRate === void 0 ? 1 : _ref2$playbackRate,\n    _ref2$soundEnabled = _ref2.soundEnabled,\n    soundEnabled = _ref2$soundEnabled === void 0 ? true : _ref2$soundEnabled,\n    _ref2$interrupt = _ref2.interrupt,\n    interrupt = _ref2$interrupt === void 0 ? false : _ref2$interrupt,\n    onload = _ref2.onload,\n    delegated = _objectWithoutPropertiesLoose(_ref2, [\"id\", \"volume\", \"playbackRate\", \"soundEnabled\", \"interrupt\", \"onload\"]);\n  var HowlConstructor = React__default.useRef(null);\n  var isMounted = React__default.useRef(false);\n  var _React$useState = React__default.useState(null),\n    duration = _React$useState[0],\n    setDuration = _React$useState[1];\n  var _React$useState2 = React__default.useState(null),\n    sound = _React$useState2[0],\n    setSound = _React$useState2[1];\n  var handleLoad = function handleLoad() {\n    if (typeof onload === 'function') {\n      // @ts-ignore\n      onload.call(this);\n    }\n    if (isMounted.current) {\n      // @ts-ignore\n      setDuration(this.duration() * 1000);\n    } // @ts-ignore\n\n    setSound(this);\n  }; // We want to lazy-load Howler, since sounds can't play on load anyway.\n\n  useOnMount(function () {\n    import('howler').then(function (mod) {\n      if (!isMounted.current) {\n        var _mod$Howl;\n\n        // Depending on the module system used, `mod` might hold\n        // the export directly, or it might be under `default`.\n        HowlConstructor.current = (_mod$Howl = mod.Howl) !== null && _mod$Howl !== void 0 ? _mod$Howl : mod[\"default\"].Howl;\n        isMounted.current = true;\n        new HowlConstructor.current(_extends({\n          src: Array.isArray(src) ? src : [src],\n          volume: volume,\n          rate: playbackRate,\n          onload: handleLoad\n        }, delegated));\n      }\n    });\n    return function () {\n      isMounted.current = false;\n    };\n  }); // When the `src` changes, we have to do a whole thing where we recreate\n  // the Howl instance. This is because Howler doesn't expose a way to\n  // tweak the sound\n\n  React__default.useEffect(function () {\n    if (HowlConstructor.current && sound) {\n      setSound(new HowlConstructor.current(_extends({\n        src: Array.isArray(src) ? src : [src],\n        volume: volume,\n        onload: handleLoad\n      }, delegated)));\n    } // The linter wants to run this effect whenever ANYTHING changes,\n    // but very specifically I only want to recreate the Howl instance\n    // when the `src` changes. Other changes should have no effect.\n    // Passing array to the useEffect dependencies list will result in\n    // ifinite loop so we need to stringify it, for more details check\n    // https://github.com/facebook/react/issues/14476#issuecomment-471199055\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [JSON.stringify(src)]); // Whenever volume/playbackRate are changed, change those properties\n  // on the sound instance.\n\n  React__default.useEffect(function () {\n    if (sound) {\n      sound.volume(volume);\n      sound.rate(playbackRate);\n    } // A weird bug means that including the `sound` here can trigger an\n    // error on unmount, where the state loses track of the sprites??\n    // No idea, but anyway I don't need to re-run this if only the `sound`\n    // changes.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [volume, playbackRate]);\n  var play = React__default.useCallback(function (options) {\n    if (typeof options === 'undefined') {\n      options = {};\n    }\n    if (!sound || !soundEnabled && !options.forceSoundEnabled) {\n      return;\n    }\n    if (interrupt) {\n      sound.stop();\n    }\n    if (options.playbackRate) {\n      sound.rate(options.playbackRate);\n    }\n    sound.play(options.id);\n  }, [sound, soundEnabled, interrupt]);\n  var stop = React__default.useCallback(function (id) {\n    if (!sound) {\n      return;\n    }\n    sound.stop(id);\n  }, [sound]);\n  var pause = React__default.useCallback(function (id) {\n    if (!sound) {\n      return;\n    }\n    sound.pause(id);\n  }, [sound]);\n  var returnedValue = [play, {\n    sound: sound,\n    stop: stop,\n    pause: pause,\n    duration: duration\n  }];\n  return returnedValue;\n}\nexport default useSound;\nexport { useSound };","map":{"version":3,"mappings":"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","names":["useOnMount","callback","React","useSound","src","id","volume","playbackRate","soundEnabled","interrupt","onload","delegated","HowlConstructor","useRef","isMounted","useState","duration","setDuration","sound","setSound","handleLoad","call","current","then","mod","Howl","Array","isArray","rate","useEffect","JSON","stringify","play","useCallback","options","forceSoundEnabled","stop","pause","returnedValue"],"sources":["/home/sclab/renewal/frontend/node_modules/use-sound/src/use-on-mount.ts","/home/sclab/renewal/frontend/node_modules/use-sound/src/index.ts"],"sourcesContent":["import * as React from 'react';\n\nexport default function useOnMount(callback: React.EffectCallback) {\n  React.useEffect(callback, []);\n}\n","import React from 'react';\n\nimport useOnMount from './use-on-mount';\n\nimport { HookOptions, PlayOptions, PlayFunction, ReturnedValue } from './types';\n\nexport default function useSound<T = any>(\n  src: string | string[],\n  {\n    id,\n    volume = 1,\n    playbackRate = 1,\n    soundEnabled = true,\n    interrupt = false,\n    onload,\n    ...delegated\n  }: HookOptions<T> = {} as HookOptions\n) {\n  const HowlConstructor = React.useRef<HowlStatic | null>(null);\n  const isMounted = React.useRef(false);\n\n  const [duration, setDuration] = React.useState<number | null>(null);\n\n  const [sound, setSound] = React.useState<Howl | null>(null);\n\n  const handleLoad = function() {\n    if (typeof onload === 'function') {\n      // @ts-ignore\n      onload.call(this);\n    }\n\n    if (isMounted.current) {\n      // @ts-ignore\n      setDuration(this.duration() * 1000);\n    }\n\n    // @ts-ignore\n    setSound(this);\n  };\n\n  // We want to lazy-load Howler, since sounds can't play on load anyway.\n  useOnMount(() => {\n    import('howler').then(mod => {\n      if (!isMounted.current) {\n        // Depending on the module system used, `mod` might hold\n        // the export directly, or it might be under `default`.\n        HowlConstructor.current = mod.Howl ?? mod.default.Howl;\n\n        isMounted.current = true;\n\n        new HowlConstructor.current({\n          src: Array.isArray(src) ? src : [src],\n          volume,\n          rate: playbackRate,\n          onload: handleLoad,\n          ...delegated,\n        });\n      }\n    });\n\n    return () => {\n      isMounted.current = false;\n    };\n  });\n\n  // When the `src` changes, we have to do a whole thing where we recreate\n  // the Howl instance. This is because Howler doesn't expose a way to\n  // tweak the sound\n  React.useEffect(() => {\n    if (HowlConstructor.current && sound) {\n      setSound(\n        new HowlConstructor.current({\n          src: Array.isArray(src) ? src : [src],\n          volume,\n          onload: handleLoad,\n          ...delegated,\n        })\n      );\n    }\n    // The linter wants to run this effect whenever ANYTHING changes,\n    // but very specifically I only want to recreate the Howl instance\n    // when the `src` changes. Other changes should have no effect.\n    // Passing array to the useEffect dependencies list will result in\n    // ifinite loop so we need to stringify it, for more details check\n    // https://github.com/facebook/react/issues/14476#issuecomment-471199055\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [JSON.stringify(src)]);\n\n  // Whenever volume/playbackRate are changed, change those properties\n  // on the sound instance.\n  React.useEffect(() => {\n    if (sound) {\n      sound.volume(volume);\n      sound.rate(playbackRate);\n    }\n    // A weird bug means that including the `sound` here can trigger an\n    // error on unmount, where the state loses track of the sprites??\n    // No idea, but anyway I don't need to re-run this if only the `sound`\n    // changes.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [volume, playbackRate]);\n\n  const play: PlayFunction = React.useCallback(\n    (options?: PlayOptions) => {\n      if (typeof options === 'undefined') {\n        options = {};\n      }\n\n      if (!sound || (!soundEnabled && !options.forceSoundEnabled)) {\n        return;\n      }\n\n      if (interrupt) {\n        sound.stop();\n      }\n\n      if (options.playbackRate) {\n        sound.rate(options.playbackRate);\n      }\n\n      sound.play(options.id);\n    },\n    [sound, soundEnabled, interrupt]\n  );\n\n  const stop = React.useCallback(\n    id => {\n      if (!sound) {\n        return;\n      }\n      sound.stop(id);\n    },\n    [sound]\n  );\n\n  const pause = React.useCallback(\n    id => {\n      if (!sound) {\n        return;\n      }\n      sound.pause(id);\n    },\n    [sound]\n  );\n\n  const returnedValue: ReturnedValue = [\n    play,\n    {\n      sound,\n      stop,\n      pause,\n      duration,\n    },\n  ];\n\n  return returnedValue;\n}\n\nexport { useSound };\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}