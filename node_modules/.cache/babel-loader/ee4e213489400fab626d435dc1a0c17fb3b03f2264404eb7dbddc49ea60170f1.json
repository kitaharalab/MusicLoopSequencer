{"ast":null,"code":"var _jsxFileName = \"/home/sclab/renewal/frontend/src/ExcitementCurve.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useRef, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ExcitementCurve() {\n  _s();\n  const canvasRef = useRef();\n  const curveLength = 1152;\n  const curveInitial = 250;\n  const [linesY, setLinesY] = useState(new Array(curveLength).fill(curveInitial));\n  const [posX, setPosX] = useState(0);\n  const [posY, setPosY] = useState(0);\n  const [drawing, setDrawing] = useState(false);\n  const startDraw = _ref => {\n    let {\n      nativeEvent\n    } = _ref;\n    const {\n      offsetX,\n      offsetY\n    } = nativeEvent;\n    setPosX(Math.floor(offsetX));\n    setPosY(Math.floor(offsetY));\n    setLinesY(linesY.map((pos, index) => index === posX ? posY : pos));\n    setDrawing(true);\n  };\n  const draw = _ref2 => {\n    let {\n      nativeEvent\n    } = _ref2;\n    if (!drawing) {\n      return;\n    }\n    const {\n      offsetX,\n      offsetY\n    } = nativeEvent;\n    let array = new Array(curveLength);\n    for (let i = 0; i < curveLength; i++) {\n      array[i] = linesY[i];\n    }\n    array[offsetX] = offsetY;\n    let difference = Math.floor(Math.abs(offsetX - posX));\n    if (offsetX > posX) {\n      for (let i = 1; i < difference; i++) {\n        array[posX + i] = Math.floor(posY + (offsetY - posY) * (posX + i - posX) / (offsetX - posX));\n      }\n    } else {\n      for (let i = 1; i < difference; i++) {\n        array[posX - i] = Math.floor(posY + (offsetY - posY) * (posX - i - posX) / (offsetX - posX));\n      }\n    }\n    setLinesY([...array]);\n    setPosX(Math.floor(offsetX));\n    setPosY(Math.floor(offsetY));\n  };\n  const stopDraw = () => {\n    setDrawing(false);\n  };\n  useEffect(() => {\n    const canvas1 = canvasRef.current;\n    const ctx1 = canvas1.getContext('2d');\n    ctx1.fillStyle = 'black';\n    ctx1.strokeStyle = \"black\";\n    ctx1.lineWidth = \"3\";\n    ctx1.strokeRect(0, 0, canvas1.width, canvas1.height);\n    ctx1.lineWidth = \"1\";\n    ctx1.clearRect(0, 1, 1151, 278);\n    ctx1.strokeStyle = \"gray\";\n    for (let i = 0; i < 32; i++) {\n      for (let j = 0; j < 5; j++) {\n        ctx1.strokeRect(36 * i, 56 * j, 36, 56);\n      }\n    }\n    ctx1.lineWidth = \"3\";\n    ctx1.strokeStyle = \"blue\";\n    ctx1.beginPath();\n    for (var i = 0; i < 1151; i++) {\n      ctx1.moveTo(i, linesY[i]); //盛り上がり度曲線を描く．\n      ctx1.lineTo(i + 1, linesY[i + 1]);\n    }\n    ctx1.stroke();\n  }, [linesY]);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef,\n    width: \"1152\",\n    height: \"280\",\n    id: \"canvas1\",\n    onMouseDown: startDraw,\n    onMouseUp: stopDraw,\n    onMouseMove: draw\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 9\n  }, this);\n}\n_s(ExcitementCurve, \"R0AB5VjSAzmyrFBCVOy2NN78Ut0=\");\n_c = ExcitementCurve;\nvar _c;\n$RefreshReg$(_c, \"ExcitementCurve\");","map":{"version":3,"names":["useEffect","useRef","useState","ExcitementCurve","canvasRef","curveLength","curveInitial","linesY","setLinesY","Array","fill","posX","setPosX","posY","setPosY","drawing","setDrawing","startDraw","nativeEvent","offsetX","offsetY","Math","floor","map","pos","index","draw","array","i","difference","abs","stopDraw","canvas1","current","ctx1","getContext","fillStyle","strokeStyle","lineWidth","strokeRect","width","height","clearRect","j","beginPath","moveTo","lineTo","stroke"],"sources":["/home/sclab/renewal/frontend/src/ExcitementCurve.jsx"],"sourcesContent":["import { useEffect, useRef, useState } from 'react';\n\nexport default function ExcitementCurve() {\n    const canvasRef = useRef();\n    const curveLength = 1152;\n    const curveInitial = 250;\n    const [linesY, setLinesY] = useState(new Array(curveLength).fill(curveInitial))\n    const [posX, setPosX] = useState(0);\n    const [posY, setPosY] = useState(0);\n    const [drawing, setDrawing] = useState(false);\n\n    const startDraw = ({ nativeEvent }) => {\n        const { offsetX, offsetY } = nativeEvent;\n        setPosX(Math.floor(offsetX));\n        setPosY(Math.floor(offsetY));\n        setLinesY(linesY.map((pos, index) => (index === posX ? posY : pos)))\n        setDrawing(true);\n    };\n\n    const draw = ({ nativeEvent }) => {\n        if (!drawing) { return; }\n        const { offsetX, offsetY } = nativeEvent;\n        let array = new Array(curveLength);\n        for (let i = 0; i < curveLength; i++) {\n            array[i] = linesY[i]\n        }\n        array[offsetX] = offsetY;\n        let difference = Math.floor((Math.abs(offsetX - posX)));\n        if (offsetX > posX) {\n            for (let i = 1; i < difference; i++) {\n                array[posX + i] = Math.floor(posY + (offsetY - posY) * (posX + i - posX) / (offsetX - posX));\n            }\n        } else {\n            for (let i = 1; i < difference; i++) {\n                array[posX - i] = Math.floor(posY + (offsetY - posY) * (posX - i - posX) / (offsetX - posX));\n            }\n        }\n        setLinesY([...array])\n\n        setPosX(Math.floor(offsetX))\n        setPosY(Math.floor(offsetY))\n\n    };\n\n    const stopDraw = () => {\n        setDrawing(false);\n    };\n\n\n    useEffect(() => {\n        const canvas1 = canvasRef.current;\n        const ctx1 = canvas1.getContext('2d');\n\n        ctx1.fillStyle = 'black';\n        ctx1.strokeStyle = \"black\"\n        ctx1.lineWidth = \"3\"\n        ctx1.strokeRect(0, 0, canvas1.width, canvas1.height);\n        ctx1.lineWidth = \"1\"\n        ctx1.clearRect(0, 1, 1151, 278);\n        ctx1.strokeStyle = \"gray\"\n        for (let i = 0; i < 32; i++) {\n            for (let j = 0; j < 5; j++) {\n                ctx1.strokeRect(36 * i, 56 * j, 36, 56);\n            }\n        }\n        ctx1.lineWidth = \"3\";\n        ctx1.strokeStyle = \"blue\"\n        ctx1.beginPath();\n        for (var i = 0; i < 1151; i++) {\n            ctx1.moveTo(i, linesY[i]);          //盛り上がり度曲線を描く．\n            ctx1.lineTo(i + 1, linesY[i + 1]);\n        }\n        ctx1.stroke();\n\n\n\n    }, [linesY]);\n\n\n\n    return (\n        <canvas ref={canvasRef} width=\"1152\" height=\"280\" id=\"canvas1\"\n            onMouseDown={startDraw}\n            onMouseUp={stopDraw}\n            onMouseMove={draw}>\n        </canvas>\n    );\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}